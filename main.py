import settings
from automatic import *
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import database
import asyncio
import aiocron
import settings
from random import randint

bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher(bot)

async def on_startup(dp):
    me = await bot.get_me()
    print(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò–º—è –±–æ—Ç–∞: {me.full_name}')

@dp.message_handler(commands=['start'], chat_type='private')
async def start(message: types.Message):
    users = settings.USERS
    if message.chat.id in users:
        await message.reply(f"""<b>–ü—Ä–∏–≤–µ—Ç! üëã

–Ø ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π @XXXXXXX, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ VPN!

üìÖ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü 15 —á–∏—Å–ª–∞ —è –±—É–¥—É –ø—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.
üîî –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –∑–∞–±—É–¥–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å VPN, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.</b>
""", parse_mode="HTML", disable_web_page_preview=True)
        await send_logs(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start")    
    else:
        await message.reply(f"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", parse_mode="HTML", disable_web_page_preview=True)
        await send_logs(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ @{message.from_user.username} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –±–æ—Ç–∞")    


async def send_reminder(user_id, repeated : bool = True):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
    keyboard = types.InlineKeyboardMarkup()
    pay_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")
    keyboard.add(pay_button)
    
    random_int = randint(1, 500)
    random_photo = f"./img/dog_images/dog_{random_int}.jpg"

    if repeated:
        message = (f"<b>üîî –í—Ä–µ–º—è –ø—Ä–æ–¥–ª–∏—Ç—å VPN!</b>\n–ù–∞–∂–º–∏ ¬´<b>–û–ø–ª–∞—Ç–∏—Ç—å</b>¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n<b>‚è≥ –í–∞–∂–Ω–æ</b>: –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ <b>—Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç</b> ‚Äì –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π!\n\n–°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏: {random_int}")
    else:
        message = (f"<b>üîî VPN –µ—â—ë –Ω–µ –ø—Ä–æ–¥–ª—ë–Ω!</b>\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–ù–∞–∂–º–∏ ¬´<b>–û–ø–ª–∞—Ç–∏—Ç—å</b>¬ª, –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É.\n‚è≥ <b>–í–∞–∂–Ω–æ:</b> —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ <b>10 –º–∏–Ω—É—Ç.</b>\n\n–°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏: {random_int}")
    try:
        with open(random_photo, "rb") as photo:
            photo_data = photo.read()
        await bot.send_photo(chat_id=user_id, caption=message, photo=photo_data, parse_mode="HTML", reply_markup=keyboard)
    except:
        pass

@dp.callback_query_handler(lambda c: c.data == "pay")
async def process_payment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    user_id = callback_query.from_user.id
    
    keyboard = types.InlineKeyboardMarkup()
    pay_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")
    keyboard.add(pay_button)
    
    await callback_query.message.edit_caption(f"{callback_query.message.html_text}\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>", reply_markup=keyboard, parse_mode="HTML")

    try:
        payment_url = get_payment_link(settings.EMAIL, settings.PASSWORD, amount=300)
        if not payment_url:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É")
        await send_logs(f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è @{callback_query.from_user.username}</b>")
        
        button = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å!", url=payment_url))
        database.remove_unpaid_user(user_id)
        database.add_paid_user(
            user_id=user_id,
            username=callback_query.from_user.username,
            amount=300,
            date=str(datetime.now().strftime("%d.%m.%Y | %H:%M"))
        )
        await send_logs(f"<b>–ü–æ–ª—å–∑–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É!</b>")
        await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
        with open("./img/description/oplata.png", "rb") as photo:
            await bot.send_photo(chat_id=user_id, caption=f"<b>üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞!\n–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± (–°–ü–ë, –∫–∞—Ä—Ç–∞, T-Pay, SberPay –∏ –¥—Ä.) ‚Äî –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ! üöÄ</b>", photo=photo, parse_mode="HTML", reply_markup=button)
    except Exception as e:
        print(e)
        await bot.send_message(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", chat_id=user_id, parse_mode="HTML")

async def send_logs(text : str):
    now = str(datetime.now().strftime("%d.%m.%Y | %H:%M"))
    print(now, text)
    await bot.send_message(text=text, chat_id=settings.ADMINS_LOGS_CHANNEL, parse_mode="HTML", disable_web_page_preview=True, disable_notification=True) 


async def monthly_reminder():
    users = settings.USERS  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users:
        database.add_unpaid_user(user_id=user_id) #–û—Ç–º–µ—á–∞–µ–º –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
        await send_reminder(user_id)
        await send_logs(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–ø–ª–∞—Ç–∏—Ç—å {user_id}")

async def overdue_reminder():
    unpaid_users = database.get_unpaid_users()  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏
    for user_id in unpaid_users:
        await send_reminder(user_id, repeated=False)
        await send_logs(f"–ü–û–í–¢–û–†–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–ø–ª–∞—Ç–∏—Ç—å {user_id}")

async def start_bot():
    await on_startup(dp)
    await dp.start_polling()

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 10:00 —É—Ç—Ä–∞
    aiocron.crontab('0 10 15 * *', func=monthly_reminder)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–ø–ª–∞—Ç—ã
    aiocron.crontab('0 10 */2 * *', func=overdue_reminder)

    await asyncio.gather(start_bot())

if __name__ == "__main__":
    asyncio.run(main())